一：关于野火IMX6ULL开发板的介绍
	它们的前身是 Freescale 旗下的产品，目前属于 NXP 公司，NXP 官方提供的资料包含 uboot、 Linux 内核Yocto 定制示例工程，完善的裸机SDK 软件库等，本书讲解主要采用的是 i.MX6ULL 系列处理器，它包含一个 Cortex-A7 内核，如型号为MCIMX6Y2CVM08AB 的芯片， 它属于i.MX6ULL 系列，是主频为 792MHz、芯片封装为 BGA，尺寸为 14x14mm，焊盘间距为 0.8pitch 的工业级芯片。Cortex-A7 处理器的架构和功能集与 CortexA15 处理器大部分相同，单个 Cortex-A7 处理器的能源效率是 ARM Cortex-A8 处理器的 5 倍，性能提升 50%，而尺寸仅为后者的五分之一。Cortex-A7架构处理器的应用场景已转移至低功耗嵌入式设备上，如可穿戴设备，IoT节点等。i.MX6系列处理器有Cortex-A9和Cortex-A7的不同型号，需要根据具体的应用场景进行选择。NXP 针对 MCU（微控制器）的应用场景，推出了 i.MX RT 系列跨界处理器,该处理器在 i.MX6 的 MPU（应用处理器）平台之上把其 Cortex-A 内核换成 Cortex-M 内核，使得它具备了应用处理器的高性能及丰富的功能，又具备传统微控制器的易用、实时及低功耗的特性。开发主机要用的是 Ubuntu 即可。至于在开发板上运行的 Linux 系统，也可以理解为这是我们针对特定板子而定制的 Linux 发行版，Ubuntu 衍生自 Debian，由于其易用性，可以说是最成功的 Linux 桌面版。即使是只进行 Linux 嵌入式开发工作，也避免不了需要使用 Windows 下的工具，如后期我们给开发板烧录 uboot、 Linux 内核时，使用到的 NXP 官方 MFGtools 工具时，还是依赖于 Windows 系统。

二：linux系统文件结构
	目录 目录放置的内容
	bin 存放系统命令的目录，如命令 cat， cp， mkdir
	boot 存放开机启动过程所需的内容，如开机管理程序 grub2
	dev 所有设备文件的目录（如声卡、 硬盘、光驱）
	etc 系统的主要配置文件
	home 用户家目录数据的存放目录
	lib 存放 sbin 和 bin 目录下命令所需的库文件
	lib32/lib64 存放二进制函数库，支持 32 位/64 位
	lost+found 在 EXT3/4 系统中，当系统意外崩溃或意外关机时，会产生一些碎片文件在这个目录下面，系统启动 fcsk 工具会检查这个目录，并修复已损坏的文件。
	media 用于挂载光盘，软盘和 DVD 等设备
	mnt 同 media 作用一样，用于临时挂载存储设备
	opt 第三方软件安装存放目录。
	proc 进程及内核信息存放目录，不占用硬盘空间。
	root root 用户的家目录
	run 是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。
	sbin root 用户使用的命令存放目录
	srv 一些网络服务所需要的数据文件
	sys 同 proc 目录，用于记录 CPU 与系统硬件的相关信息
	tmp 程序运行时产生的临时文件存放目录
起来rogramefiles
起来
起来ightness、 device、max_brightness、 power、 起来表示 LED 灯的亮度， trigger 表示 LED 灯的触发方起来件，从而达到控制 LED 灯的目的。
起来

三：linux常用的指令
	命令：
	1：cd 命令是 change dir 的简写
	   cd test
	   cd /home/embedfire/test
	   它们都表示切换至“/home/embedfire/test”目录，这其中的“test”就是相对路径，而
	  “/home/embedfire/test”是绝对路径。
		特别地，我们需要知道目录的如下表示：
	 “~”：波浪号，表示为当前用户的 home 目录
	 “.”：一个英文句号，表示当前目录
	 “..” ：两个英文句号，表示当前目录的上一层目录
	 “/” ：斜杠符号，表示为根目录
	 “-”：减号，不是目录，但作为 cd 命令的参数时可以返回上一次 cd 切换前的目录。

		#在后面的说明中， #号表示注释，它后面的内容不要输入到终端中
		cd / # 切换至根目录
		ls # 列出当前目录的内容（根目录）
		cd - # 返回至上一次的目录（家目录）
		cd .. # 切换至上一级目录
		ls # 列出当前目录的内容（home 目录）
		cd embedfire # 切换至 embedfire 目录（请把 embedfire 换成自己的用户名）
		切换功能指令：   cd 下载

		注意以上命令中，命令名 cd 与路径名之间是有空格的，实际上包括以后使用的所有命令中，命令名，命令选项以及命令参数之间都是要有空格分隔开的。

		-help指令和-man命令


四：修改权限

	sudo chmod -R 777 /home/xxx/new
	查看某一个文件的权限：ls -ld ./new
	查看该文件下的所有文件的权限：ls -l ./文件
	
	2：ls -ah查看隐身文件
		

五：vs-code软件的使用
	1：用vs code打开文本指令： sudo code /文件路径/文件名 --user-data-dir argument
	2：通过后端打开vs code指令：code
	3：在指定目录下输入code readme.txt，会在该目录下新建一个readme.txt,并且在编辑器中打开

六：创建文件夹
	#在主机上执行如下命令
	mkdir -p ~/workdir/example/hello_c #创建 hello_c 目录（只是创建文件夹的？）
	
	rm -rf /路径/文件夹  （权限要是不够加上sudo）  删除文件夹指令，这个指令比较危险尽量少用，一般删除后无法恢复
	
	rm -r /路径/文件夹     删除递归目录
	
	rm -d /路径/要删除文件夹的名字，删除空目录指令    （如果权限不够，可以用加sudo），注意此处删除的文件只能是空文件，若文件中有任何文件，指令无效
	
七：apt_get和apt下载指令的使用

	如果开发主机使用ifconfig后提示找不到命令，请使用如下命令进行安装
	sudo apt_get install net-tools

	安装vim
	sudo apt install vim

	sudo apt-get install 软件包名    （安装一个软件）
	sudo apt-get remove 软件包名 （卸载一个软件）


八：NFS挂载指令，在开发板后台端口输入下列指令，实现开发板挂载
	mount -o vers=4 172.168.0.177:/home/zhaozhichao/workdir /home/root/mountnfs #由于主机的IP地址会不断地变化，输入指令之前，先在pc后台输入ifconfig查看pc机的ip



九：以下就是linux应用开发的总体思想
	{
	linux中一切皆文件，驱动加载成功后会在“/dev”目录下生成一个相应的文件，应用文件通过对这个名为“/dev/xxx”(xxx是具体的驱动文件名字)的文件进行相应的操作即可实现对硬件的操作。例如此处有个叫dev/led的驱动程序文件，此文件是led灯的驱动文件。应用程序使用open函数来打开文件/dev/led，使用结束以后，使用close函数关闭/dev/led这个文件。open和close就是打开和关闭led驱动的函数，如果要点亮和熄灭led，那么就使用write函数来操作，也就是向此驱动写入数据，这个数据就是要关闭还是打开led的控制参数。如果要获取led灯的状态，就用read函数从驱动中读取相应的状态。
	}

	linux中应用程序员运行在用户空间，而驱动属于内核部分，运行在内核空间，用户不能直接对内核进行操作，因此必须使用一种叫做“系统调用”的方法来实现从用户空间陷入到内核空间，这样才能实现对底层驱动的操作。open\close\write和read等这些函数是由C库提供的，在linux系统中，系统调用作为C库的一部分。当我们调用open函数时候流程大概如下：
	应用调用open（）函数(应用程序)——>c库中的open（）函数（c库）——>open（）系统调用（）内核——>驱动的open（）函数（具体驱动）

	linux驱动有两种运行方式，第一种就是将驱动编译进linux内核中，这样当linux内核启动的时候就会自动运行驱动程序。第二种就是将驱动编译成模块（linux下的模块扩展名为.ko）在linux内核启动后使用“insmod”命令加载驱动模块。

	驱动模块有加载和卸载两种操作，在编写驱动时候要注册这两种操作函数，模块的加载和卸载注册函数如下
	module_init(xxx_init); //注册模块加载函数
	module_exit(xxx_exit); //注册模块卸载函数

	字符设备操作流程：

	加载-注册-注销-卸载

	static int_加载（）
	{
	注册
	}

	static void_下载（）
	{
	注销
	}

	查看当前已经被使用掉的设备号： cat /proc/devices

	linux中设备号的范围是0~0xfff（4095）

	设备号：动态和静态
	静态查看指令：cat /proc/devices
	动态设备号申请函数：int alloc_chrdev_region(dev_t *dev,unsigned baseminor,unsigned count,const *name)
	注销字符设备之后要释放掉的设备号，设备号释放函数如下：void unregister_chrdev_region(dev_t from,unsigned count)

	通过以下指令查看具体的程序信息：
	readelf -a hello   #能够看到当前程序是可以运行在什么平台上，该平台的版本号是什么
	或者
	file hello

	lsmod指令，查看系统中当前存在的模块

	在Linux中，设备类型可以分为：字符设备、块设备和网络设备。

	mknod /dev/要创建的节点文件 c 200 0  ：解释，mknod创建节点命令，/dev/要创建节点文件，c表示这是个字符设备，200是设备的主设备号，0是设备的次设备号。

十：交叉编译器的安装

	今天下载安装arm-linux-gnueabihf-gcc 8.3.0编译器，使用的是野火提供的脚本build-gcc.sh,默认状态无法直接运行，查看文件权限后ls -l /文件路径，发现文件只有读写权限，通过sudo chmod -R 777 ./wenjian修改文件权限，再次查看ls -l，再次运行脚本./build-gcc.sh实现文件下载。



十一：git指令学习，了解git的工作区、版本库（暂存区、master）的关系。
	创建版本库：
		创建一个文件夹
			mkdir learngit
		切换到该文件夹下	      
			cd learngit
		一、初始化git 
			git init
		二、添加一个文件到git
			先在learngit文件下建一个readme.txt文件，然后通过
				（1）git add readme.txt    
				（2）git commit -m "说明"
        三、建立一个远程仓库，使本地仓库与远程仓库关联，具体做法（www.liaoxuefeng.com/wiki/896043488029600/898732864121440）,据体指令为：
			git remote add origin git @github.com:ZZCTJ/learngit.git

			再输入输入git push -u origin master后出现error: src refspec master does not match any.error: 无法推送一些引用到 'git@github.com:xxx/xxx.git'的情况时，可以在终端中输入
			git pull --rebase origin master之后再输入git push -u origin master就可以把本地库的内容推送到远程，git push命令，实际上是把当前分支推送到远程。

	常用的git指令：
			git status查看当前仓库状态
			git diff 查看本次修该与上次的不同
			git log显示从最近到最远的提交日志
			git log --pretty=oneline显示从最近到最远的提交日志（精简版）
			git reflog 查看最近git操作记录，方便查找版本id号，恢复版本
			git reset --hard HEAD^ 回滚到上一个版本
			git reset --hard HEAD^^回滚到前两个版本
			git reset --bard HEAD~100回滚到前100个版本
			git reset --hard id号     回复到高版

			git checkout -- <文件名.带后缀>：用于未git add时候，工作区文件恢复到前一刻状态
			git reset HEAD <文件名。带后缀>：可以把暂存区的修改撤销掉，重新放回工作区。

			git push origin master  本地代码推送指令，正好与下面指令相反
			git clone git@github.com:ZZCTJ/gitskills.git 从远程仓库clone项目

			git checkout -b dev建立分支，并且切换到分支上=git switch -c dev
			git checkout master 切换到主线=git switch master
			git merge dev 将dev分支的工作成果合并到master分支上
			git branch -d <name删除分支

			git stash' 用于将当前现场“储藏”起来，当有更高优先级的事情要去做的时候，类似于任务挂起，将当前分支的程序暂时存储起来
			git stash list命令查看储藏的工作现场
			git stash apply 恢复‘储藏’起来的分支，恢复之后用
			git stash pop指令将之间保存的缓冲区删除

			git push origin --delete <分支名>  #删除远端分支


十二：使用git开发程序的常用思路
	开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。



20200426

1：关闭涂宁程序调试信息指令：echo 0 > /proc/net/rtl8821au/log_level

2：挂载指令mount。（需要深入了解）

3：lsusb 查看usb挂载情况

4：ssh root@172.168.0.95  连接ssh

5：mv *.h ~/src/captain/src/tcp/include   将当前路径下的.h文件复制粘贴到指定位置
     mv *.c ~/src/captain/src/tcp/src       将当前路径下的.h文件复制粘贴到指定位置

6：  ./tcp get 123.56.179.198 456 test  nullptr qqwry.dat        登录tcp远程服务器

7:bzero函数
  strncpy函数
  memset函数
  fflush
  atoi

8:/*******挂载usb设备******************/
   mount /dev/sda /mnt
   mount /dev/sda1 /mnt
   ls /mnt
   ls /dev/sd*
   cd /mnt/usb

